## ndustrial/common
## It is required by CI/CD tools and processes.
## @skip exampleValue
exampleValue: common-chart

## @section Ndustrial metadata fields (Optional)
## @param ndustrial [object]
ndustrial:
## @param ndustrial.project [string] Unique project id that this repository belongs too (Required) aka. Project slug
## @param ndustrial.name [string] The name of the application/service. (Required)
# Should match git repository name (if able)
## @param ndustrial.type [string] The service type of this deployment (api, database, backend, frontend, etl, etc...) (Required)
## @param ndustrial.organization [string] The slug of the Organization that owns the application (Required)
## @param ndustrial.owner [string] The person/team that owns this service. (Required)
## @param ndustrial.managed_by [string] The service which manages the kubernetes object Should most likely be one of: helm, contxt, fleet. (Required)
## @param ndustrial.env [string] The environment being deployed into Should most likely be one of: dev, staging, prod, or qa. (Required)
## @param ndustrial.version [string] The app version being deployed (Required)
## @param ndustrial.repo [string] The github repository where the code exists (populated by CI/CD)
## @param ndustrial.depends [array] List of projects/services this serivce depends on
## @param ndustrial.depends.0.project [string] The name of the project that this service depends on
## @param ndustrial.depends.0.name [string] The name of the project service

## @param contxt [object]
## @param contxt.projectId [string] The ID of the Contxt Stack that this object belongs to (if applicable)
## @param contxt.serviceId [string] The ID of the Contxt Service that this object belongs to (if applicable)
## @param contxt.serviceType [string] The type of the Contxt Service that this object belongs to (if applicable)
contxt:

## @section Datadog integration parameters
datadog:
  apm:
    ## @param datadog.apm.enabled Enable Datadog APM
    enabled: false
    ## @param datadog.apm.agent_host [string] The Datadog Agent hostname for sending traces -- has the same functionality as the below trace_agent_host but is used by different language's implementations of the Datadog trace library (Default: status.hostIP)
    agent_host:
    ## @param datadog.apm.env [string] Set an application’s environment e.g. prod, pre-prod, staging.
    env:
    ## @param datadog.apm.version [string] Set an application’s version in traces and logs e.g. 1.2.3, 6c44da20, 2020.02.13. Generally set along with DD_SERVICE.
    version:
    ## @param datadog.apm.profiling_enabled Enable Datadog profiling when using ddtrace-run. (Default: false)
    profiling_enabled: false
    ## @param datadog.apm.logs_injection Enables Logs Injection https://ddtrace.readthedocs.io/en/stable/advanced_usage.html#logs-injection (Default: true)
    logs_injection: true
    ## @param datadog.apm.trace_sample_rate A float, f, 0.0 <= f <= 1.0. f*100% of traces will be sampled. (Default: 1.0)
    trace_sample_rate: 1.0
    ## @param datadog.apm.trace_agent_host [string] The Datadog Agent hostname for sending traces -- has the same functionality as the above agent_host but is used by different language's implementations of the Datadog trace library (Default: status.hostIP)
    trace_agent_host:
  openmetrics:
    ## @param datadog.openmetrics.enabled Enable OpenMetrics scraping
    enabled: false
    ## @param datadog.openmetrics.schema The schema to use for OpenMetrics. (Default: http)
    schema: http
    ## @param datadog.openmetrics.host The hostname or ip to scape metrics from. (Default: Pod ip)
    host: "%%host%%"
    ## @param datadog.openmetrics.port The port to scrap metrics from (Default: 8080)
    port: 8080
    ## @param datadog.openmetrics.endpoint The endpoint to scrape metrics from
    endpoint: /metrics
    ## @param datadog.openmetrics.metrics [array] List of metrics to collect
    metrics: []
    ## @param datadog.openmetrics.type_overrides [object] Override the collected metrics types
    type_overrides: {}
